{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\src\\\\components\\\\taskForm.js\";\nimport React, { Component } from 'react';\nimport { dataURItoBlob } from '../utils';\nimport '../styles/taskForm.css';\nimport { MAX_IMAGE_HEIGHT, MAX_IMAGE_WIDTH } from '../constants';\n\nvar TaskForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskForm, _Component);\n\n  function TaskForm(props) {\n    var _this;\n\n    _classCallCheck(this, TaskForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskForm).call(this, props));\n    _this.state = {\n      previewSrc: ''\n    };\n    _this.handleImageUpload = _this.handleImageUpload.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmitForm = _this.handleSubmitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.previewTaskFunction = _this.previewTaskFunction.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskForm, [{\n    key: \"handleImageUpload\",\n    value: function handleImageUpload(e) {\n      var _this2 = this;\n\n      var file = e.target.files[0];\n      var reader = new FileReader();\n\n      reader.onload = function (e) {\n        var img = document.createElement(\"img\");\n\n        img.onload = function () {\n          var canvas = document.createElement('canvas');\n          var width = img.width;\n          var height = img.height;\n\n          if (width > height) {\n            if (width > MAX_IMAGE_WIDTH) {\n              height *= MAX_IMAGE_WIDTH / width;\n              width = MAX_IMAGE_WIDTH;\n            }\n          } else {\n            if (height > MAX_IMAGE_HEIGHT) {\n              width *= MAX_IMAGE_HEIGHT / height;\n              height = MAX_IMAGE_HEIGHT;\n            }\n          }\n\n          canvas.width = width;\n          canvas.height = height;\n          var ctx = canvas.getContext(\"2d\");\n          ctx.drawImage(img, 0, 0, width, height);\n          var dataurl = canvas.toDataURL(\"image/png\");\n\n          _this2.setState({\n            previewSrc: dataurl,\n            imageBlob: dataURItoBlob(dataurl)\n          });\n        };\n\n        img.src = e.target.result;\n      };\n\n      reader.readAsDataURL(file);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      if (this.form.current.reportValidity()) {\n        return true;\n      }\n\n      if (this.username.current.checkValidity() && this.email.current.checkValidity() && this.text.current.checkValidity() && !this.state.imageBlob) {\n        alert('Please select an image');\n      }\n    }\n  }, {\n    key: \"handleSubmitForm\",\n    value: function handleSubmitForm(e) {\n      e.preventDefault();\n\n      if (this.validateForm()) {\n        var formData = new FormData();\n        formData.append(\"username\", this.username.current.value);\n        formData.append(\"email\", this.email.current.value);\n        formData.append(\"text\", this.text.current.value);\n        formData.append(\"image\", this.state.imageBlob);\n        this.props.submitForm(formData);\n      }\n    }\n  }, {\n    key: \"previewTaskFunction\",\n    value: function previewTaskFunction(e) {\n      e.preventDefault();\n\n      if (!this.validateForm()) {\n        return;\n      }\n\n      ;\n      this.props.previewTask({\n        username: this.username.current.value,\n        email: this.email.current.value,\n        text: this.text.current.value,\n        image_path: this.state.previewSrc\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.form = React.createRef();\n      this.username = React.createRef();\n      this.email = React.createRef();\n      this.text = React.createRef();\n      var imagePreview = this.state.previewSrc;\n      return React.createElement(\"form\", {\n        name: \"test\",\n        className: \"task-form\",\n        ref: this.form,\n        onSubmit: this.handleSubmitForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Username\"), React.createElement(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        name: \"username\",\n        ref: this.username,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        id: \"email\",\n        type: \"text\",\n        name: \"email\",\n        ref: this.email,\n        required: true,\n        pattern: \"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Text\"), React.createElement(\"textarea\", {\n        id: \"text\",\n        name: \"text\",\n        rows: \"10\",\n        cols: \"70\",\n        ref: this.text,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"image\",\n        className: \"task-form__image-selector\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Select an image...\"), React.createElement(\"input\", {\n        id: \"image\",\n        type: \"file\",\n        name: \"image\",\n        hidden: true,\n        accept: \"image/x-png,image/gif,image/jpeg\",\n        onChange: this.handleImageUpload,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), imagePreview ? React.createElement(\"img\", {\n        src: imagePreview,\n        alt: \"Preview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }) : '', React.createElement(\"div\", {\n        className: \"button-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Add task\"), React.createElement(\"button\", {\n        onClick: this.previewTaskFunction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Preview\")));\n    }\n  }]);\n\n  return TaskForm;\n}(Component);\n\nexport default TaskForm;","map":{"version":3,"sources":["C:\\Users\\aldya\\Desktop\\task-list-master\\src\\components\\taskForm.js"],"names":["React","Component","dataURItoBlob","MAX_IMAGE_HEIGHT","MAX_IMAGE_WIDTH","TaskForm","props","state","previewSrc","handleImageUpload","bind","handleSubmitForm","previewTaskFunction","e","file","target","files","reader","FileReader","onload","img","document","createElement","canvas","width","height","ctx","getContext","drawImage","dataurl","toDataURL","setState","imageBlob","src","result","readAsDataURL","form","current","reportValidity","username","checkValidity","email","text","alert","preventDefault","validateForm","formData","FormData","append","value","submitForm","previewTask","image_path","createRef","imagePreview"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {dataURItoBlob} from '../utils';\nimport '../styles/taskForm.css';\nimport { MAX_IMAGE_HEIGHT, MAX_IMAGE_WIDTH } from '../constants'\n\nclass TaskForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            previewSrc: ''\n        };\n        this.handleImageUpload = this.handleImageUpload.bind(this);\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\n        this.previewTaskFunction = this.previewTaskFunction.bind(this);\n    }\n    handleImageUpload(e){\n        const file = e.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const img = document.createElement(\"img\");\n            img.onload = () => {\n                const canvas = document.createElement('canvas');\n\n                let width = img.width;\n                let height = img.height;\n\n                if (width > height) {\n                    if (width > MAX_IMAGE_WIDTH) {\n                    height *= MAX_IMAGE_WIDTH / width;\n                    width = MAX_IMAGE_WIDTH;\n                    }\n                } else {\n                    if (height > MAX_IMAGE_HEIGHT) {\n                    width *= MAX_IMAGE_HEIGHT / height;\n                    height = MAX_IMAGE_HEIGHT;\n                    }\n                }\n                canvas.width = width;\n                canvas.height = height;\n                const ctx = canvas.getContext(\"2d\");\n                ctx.drawImage(img, 0, 0, width, height);\n                const dataurl = canvas.toDataURL(\"image/png\");\n                this.setState({\n                    previewSrc: dataurl,\n                    imageBlob: dataURItoBlob(dataurl)\n                });\n            }\n            img.src = e.target.result;\n        }\n        reader.readAsDataURL(file);\n    }\n    validateForm() {\n        if(this.form.current.reportValidity()) {\n            return true;\n        }\n        if(this.username.current.checkValidity() && this.email.current.checkValidity() && this.text.current.checkValidity() && !this.state.imageBlob) {\n            alert('Please select an image');\n        }\n    }\n    handleSubmitForm(e) {\n        e.preventDefault();\n        if(this.validateForm()) {\n            var formData = new FormData();\n            formData.append(\"username\", this.username.current.value);\n            formData.append(\"email\", this.email.current.value);\n            formData.append(\"text\", this.text.current.value);\n            formData.append(\"image\", this.state.imageBlob);\n            this.props.submitForm(formData);\n        }\n\n    }\n    previewTaskFunction(e) {\n        e.preventDefault();\n        if(!this.validateForm()) {\n            return;\n        };\n        this.props.previewTask({\n            username: this.username.current.value,\n            email: this.email.current.value,\n            text: this.text.current.value,\n            image_path: this.state.previewSrc\n        });\n    }\n    render() {\n        this.form = React.createRef();\n        this.username = React.createRef();\n        this.email = React.createRef();\n        this.text = React.createRef();\n        const imagePreview = this.state.previewSrc;\n        \n        return (\n            <form name=\"test\" className=\"task-form\" ref={this.form} onSubmit={this.handleSubmitForm}>\n                <label htmlFor=\"username\">Username</label>\n                <input id=\"username\" type=\"text\" name=\"username\" ref={this.username} required></input>\n                <label htmlFor=\"email\">Email</label>\n                <input id=\"email\" type=\"text\" name=\"email\" ref={this.email} required pattern=\"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\"></input>\n                <label htmlFor=\"text\">Text</label>\n                <textarea id=\"text\" name=\"text\" rows=\"10\" cols=\"70\" ref={this.text} required></textarea>\n                <label htmlFor=\"image\" className=\"task-form__image-selector\">Select an image...</label>\n                <input id=\"image\" type=\"file\" name=\"image\" hidden accept=\"image/x-png,image/gif,image/jpeg\" \n                    onChange={this.handleImageUpload} required></input>\n                {imagePreview ? <img src={imagePreview} alt=\"Preview\"></img> : ''}\n                <div className=\"button-group\">\n                    <button type=\"submit\">Add task</button>\n                    <button onClick={this.previewTaskFunction}>Preview</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}