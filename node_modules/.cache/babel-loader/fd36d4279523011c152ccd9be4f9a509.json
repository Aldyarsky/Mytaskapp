{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\src\\\\components\\\\taskForm.js\";\nimport React, { Component } from 'react';\nimport { dataURItoBlob } from '../utils';\nimport '../styles/taskForm.css';\nimport { MAX_IMAGE_HEIGHT, MAX_IMAGE_WIDTH } from '../constants';\n\nvar TaskForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskForm, _Component);\n\n  function TaskForm(props) {\n    var _this;\n\n    _classCallCheck(this, TaskForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskForm).call(this, props));\n    _this.state = {\n      previewSrc: ''\n    };\n    _this.handleSubmitForm = _this.handleSubmitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.previewTaskFunction = _this.previewTaskFunction.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskForm, [{\n    key: \"validateForm\",\n    value: function validateForm() {\n      if (this.form.current.reportValidity()) {\n        return true;\n      }\n\n      if (this.username.current.checkValidity() && this.email.current.checkValidity() && this.text.current.checkValidity()) {\n        alert('Please select an image');\n      }\n    }\n  }, {\n    key: \"handleSubmitForm\",\n    value: function handleSubmitForm(e) {\n      e.preventDefault();\n\n      if (this.validateForm()) {\n        var formData = new FormData();\n        formData.append(\"username\", this.username.current.value);\n        formData.append(\"email\", this.email.current.value);\n        formData.append(\"text\", this.text.current.value);\n        this.props.submitForm(formData);\n      }\n    }\n  }, {\n    key: \"previewTaskFunction\",\n    value: function previewTaskFunction(e) {\n      e.preventDefault();\n\n      if (!this.validateForm()) {\n        return;\n      }\n\n      ;\n      this.props.previewTask({\n        username: this.username.current.value,\n        email: this.email.current.value,\n        text: this.text.current.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.form = React.createRef();\n      this.username = React.createRef();\n      this.email = React.createRef();\n      this.text = React.createRef();\n      return React.createElement(\"form\", {\n        name: \"test\",\n        className: \"task-form\",\n        ref: this.form,\n        onSubmit: this.handleSubmitForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"username\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Username\"), React.createElement(\"input\", {\n        id: \"username\",\n        type: \"text\",\n        name: \"username\",\n        ref: this.username,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Email\"), React.createElement(\"input\", {\n        id: \"email\",\n        type: \"text\",\n        name: \"email\",\n        ref: this.email,\n        required: true,\n        pattern: \"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Text\"), React.createElement(\"textarea\", {\n        id: \"text\",\n        name: \"text\",\n        rows: \"10\",\n        cols: \"70\",\n        ref: this.text,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"button-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, \"Add task\"), React.createElement(\"button\", {\n        onClick: this.previewTaskFunction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"Preview\")));\n    }\n  }]);\n\n  return TaskForm;\n}(Component);\n\nexport default TaskForm;","map":{"version":3,"sources":["C:\\Users\\aldya\\Desktop\\task-list-master\\src\\components\\taskForm.js"],"names":["React","Component","dataURItoBlob","MAX_IMAGE_HEIGHT","MAX_IMAGE_WIDTH","TaskForm","props","state","previewSrc","handleSubmitForm","bind","previewTaskFunction","form","current","reportValidity","username","checkValidity","email","text","alert","e","preventDefault","validateForm","formData","FormData","append","value","submitForm","previewTask","createRef"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,aAAR,QAA4B,UAA5B;AACA,OAAO,wBAAP;AACA,SAASC,gBAAT,EAA2BC,eAA3B,QAAkD,cAAlD;;IAEMC,Q;;;;;AACF,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,UAAU,EAAE;AADH,KAAb;AAGA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,uDAAxB;AACA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBD,IAAzB,uDAA3B;AANc;AAOjB;;;;mCACc;AACX,UAAG,KAAKE,IAAL,CAAUC,OAAV,CAAkBC,cAAlB,EAAH,EAAuC;AACnC,eAAO,IAAP;AACH;;AACD,UAAG,KAAKC,QAAL,CAAcF,OAAd,CAAsBG,aAAtB,MAAyC,KAAKC,KAAL,CAAWJ,OAAX,CAAmBG,aAAnB,EAAzC,IAA+E,KAAKE,IAAL,CAAUL,OAAV,CAAkBG,aAAlB,EAAlF,EAAqH;AACjHG,QAAAA,KAAK,CAAC,wBAAD,CAAL;AACH;AACJ;;;qCACgBC,C,EAAG;AAChBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAG,KAAKC,YAAL,EAAH,EAAwB;AACpB,YAAIC,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AACAD,QAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4B,KAAKV,QAAL,CAAcF,OAAd,CAAsBa,KAAlD;AACAH,QAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,KAAKR,KAAL,CAAWJ,OAAX,CAAmBa,KAA5C;AACAH,QAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwB,KAAKP,IAAL,CAAUL,OAAV,CAAkBa,KAA1C;AACA,aAAKpB,KAAL,CAAWqB,UAAX,CAAsBJ,QAAtB;AACH;AAEJ;;;wCACmBH,C,EAAG;AACnBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAG,CAAC,KAAKC,YAAL,EAAJ,EAAyB;AACrB;AACH;;AAAA;AACD,WAAKhB,KAAL,CAAWsB,WAAX,CAAuB;AACnBb,QAAAA,QAAQ,EAAE,KAAKA,QAAL,CAAcF,OAAd,CAAsBa,KADb;AAEnBT,QAAAA,KAAK,EAAE,KAAKA,KAAL,CAAWJ,OAAX,CAAmBa,KAFP;AAGnBR,QAAAA,IAAI,EAAE,KAAKA,IAAL,CAAUL,OAAV,CAAkBa;AAHL,OAAvB;AAKH;;;6BACQ;AACL,WAAKd,IAAL,GAAYZ,KAAK,CAAC6B,SAAN,EAAZ;AACA,WAAKd,QAAL,GAAgBf,KAAK,CAAC6B,SAAN,EAAhB;AACA,WAAKZ,KAAL,GAAajB,KAAK,CAAC6B,SAAN,EAAb;AACA,WAAKX,IAAL,GAAYlB,KAAK,CAAC6B,SAAN,EAAZ;AAEA,aACI;AAAM,QAAA,IAAI,EAAC,MAAX;AAAkB,QAAA,SAAS,EAAC,WAA5B;AAAwC,QAAA,GAAG,EAAE,KAAKjB,IAAlD;AAAwD,QAAA,QAAQ,EAAE,KAAKH,gBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAO,QAAA,EAAE,EAAC,UAAV;AAAqB,QAAA,IAAI,EAAC,MAA1B;AAAiC,QAAA,IAAI,EAAC,UAAtC;AAAiD,QAAA,GAAG,EAAE,KAAKM,QAA3D;AAAqE,QAAA,QAAQ,MAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAGI;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,EAII;AAAO,QAAA,EAAE,EAAC,OAAV;AAAkB,QAAA,IAAI,EAAC,MAAvB;AAA8B,QAAA,IAAI,EAAC,OAAnC;AAA2C,QAAA,GAAG,EAAE,KAAKE,KAArD;AAA4D,QAAA,QAAQ,MAApE;AAAqE,QAAA,OAAO,EAAC,qDAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAKI;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ,EAMI;AAAU,QAAA,EAAE,EAAC,MAAb;AAAoB,QAAA,IAAI,EAAC,MAAzB;AAAgC,QAAA,IAAI,EAAC,IAArC;AAA0C,QAAA,IAAI,EAAC,IAA/C;AAAoD,QAAA,GAAG,EAAE,KAAKC,IAA9D;AAAoE,QAAA,QAAQ,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,EAOI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,QAAA,OAAO,EAAE,KAAKP,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,CAPJ,CADJ;AAcH;;;;EA3DkBV,S;;AA8DvB,eAAeI,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport {dataURItoBlob} from '../utils';\nimport '../styles/taskForm.css';\nimport { MAX_IMAGE_HEIGHT, MAX_IMAGE_WIDTH } from '../constants'\n\nclass TaskForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            previewSrc: ''\n        };\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\n        this.previewTaskFunction = this.previewTaskFunction.bind(this);\n    }\n    validateForm() {\n        if(this.form.current.reportValidity()) {\n            return true;\n        }\n        if(this.username.current.checkValidity() && this.email.current.checkValidity() && this.text.current.checkValidity()) {\n            alert('Please select an image');\n        }\n    }\n    handleSubmitForm(e) {\n        e.preventDefault();\n        if(this.validateForm()) {\n            var formData = new FormData();\n            formData.append(\"username\", this.username.current.value);\n            formData.append(\"email\", this.email.current.value);\n            formData.append(\"text\", this.text.current.value);\n            this.props.submitForm(formData);\n        }\n\n    }\n    previewTaskFunction(e) {\n        e.preventDefault();\n        if(!this.validateForm()) {\n            return;\n        };\n        this.props.previewTask({\n            username: this.username.current.value,\n            email: this.email.current.value,\n            text: this.text.current.value,\n        });\n    }\n    render() {\n        this.form = React.createRef();\n        this.username = React.createRef();\n        this.email = React.createRef();\n        this.text = React.createRef();\n        \n        return (\n            <form name=\"test\" className=\"task-form\" ref={this.form} onSubmit={this.handleSubmitForm}>\n                <label htmlFor=\"username\">Username</label>\n                <input id=\"username\" type=\"text\" name=\"username\" ref={this.username} required></input>\n                <label htmlFor=\"email\">Email</label>\n                <input id=\"email\" type=\"text\" name=\"email\" ref={this.email} required pattern=\"[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}\"></input>\n                <label htmlFor=\"text\">Text</label>\n                <textarea id=\"text\" name=\"text\" rows=\"10\" cols=\"70\" ref={this.text} required></textarea>\n                <div className=\"button-group\">\n                    <button type=\"submit\">Add task</button>\n                    <button onClick={this.previewTaskFunction}>Preview</button>\n                </div>\n            </form>\n        );\n    }\n}\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}