{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\src\\\\containers\\\\taskContainer.js\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/taskContainer.css';\nimport TaskList from '../components/taskList';\nimport { getQueryParams, updateQueryStringParameter, generateSignature } from '../utils';\nimport { TOKEN } from '../constants';\n\nvar TaskContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TaskContainer, _Component);\n\n  function TaskContainer(props) {\n    var _this;\n\n    _classCallCheck(this, TaskContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TaskContainer).call(this, props));\n    _this.state = {\n      tasks: [],\n      pagesCount: 1,\n      sortField: '',\n      sortDirection: '',\n      page: '',\n      isAdmin: false\n    };\n    _this.updateTask = _this.updateTask.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TaskContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchData();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.fetchData();\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this2 = this;\n\n      var queryParams = getQueryParams(this.props.location.search);\n      var sortField = queryParams.sort_field || 'id';\n      var sortDirection = queryParams.sort_direction || 'asc';\n      var page = queryParams.page || '1';\n\n      if (this.state.sortField === sortField && this.state.sortDirection === sortDirection && this.state.page === page) {\n        return;\n      }\n\n      this.setState({\n        sortField: sortField,\n        sortDirection: sortDirection,\n        page: page\n      });\n      fetch(\"https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=aldiyar&sort_field=\".concat(sortField, \"&sort_direction=\").concat(sortDirection, \"&page=\").concat(page)).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.status !== 'ok' || !data.message) {\n          alert('Error: ' + data.message);\n        }\n\n        var _data$message = data.message,\n            tasks = _data$message.tasks,\n            totalTaskCount = _data$message.total_task_count;\n        var pagesCount = Math.max(Math.ceil(totalTaskCount / 3), 1);\n\n        _this2.setState({\n          tasks: tasks,\n          pagesCount: pagesCount\n        });\n      });\n    }\n  }, {\n    key: \"updateTask\",\n    value: function updateTask(task) {\n      var _this3 = this;\n\n      if (!this.props.isAdmin || !task.id) {\n        return;\n      }\n\n      var formData = new FormData();\n      formData.append(\"text\", task.text);\n      formData.append(\"status\", task.status);\n      formData.append(\"token\", TOKEN);\n      formData.append(\"signature\", generateSignature({\n        status: task.status,\n        text: task.text\n      }, TOKEN));\n      fetch(\"https://uxcandy.com/~shapoval/test-task-backend/edit/\".concat(task.id, \"/?developer=alexander\"), {\n        body: formData,\n        method: \"post\"\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        if (data.status !== 'ok') {\n          alert('Something went wrong: ' + data.message);\n          return;\n        }\n\n        var tasks = _this3.state.tasks.slice(0);\n\n        var updatedTask = tasks.find(function (el) {\n          return el.id === task.id;\n        });\n        updatedTask.text = task.text;\n        updatedTask.status = task.status;\n\n        _this3.setState({\n          tasks: tasks\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var queryString = this.props.location.search;\n      var pages = [];\n\n      for (var i = 1; i <= this.state.pagesCount; i++) {\n        pages.push(React.createElement(Link, {\n          to: updateQueryStringParameter(queryString, 'page', i),\n          className: \"pagination-bar__page\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }, i));\n      }\n\n      ;\n      return React.createElement(\"div\", {\n        className: \"task-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"task-container__sorting-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"sorting-bar__section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Sort by:\", React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_field', 'id'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Id\"), React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_field', 'username'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Username\"), React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_field', 'email'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Email\"), React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_field', 'status'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Status\")), React.createElement(\"div\", {\n        className: \"sorting-bar__section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Sort direction:\", React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_direction', 'asc'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Ascending\"), React.createElement(Link, {\n        to: updateQueryStringParameter(queryString, 'sort_direction', 'desc'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Descending\"))), React.createElement(TaskList, {\n        tasks: this.state.tasks,\n        isAdmin: this.props.isAdmin,\n        updateTask: this.updateTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"task-container__pagination-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, pages));\n    }\n  }]);\n\n  return TaskContainer;\n}(Component);\n\nexport default TaskContainer;","map":{"version":3,"sources":["C:\\Users\\aldya\\Desktop\\task-list-master\\src\\containers\\taskContainer.js"],"names":["React","Component","Link","TaskList","getQueryParams","updateQueryStringParameter","generateSignature","TOKEN","TaskContainer","props","state","tasks","pagesCount","sortField","sortDirection","page","isAdmin","updateTask","bind","fetchData","queryParams","location","search","sort_field","sort_direction","setState","fetch","then","res","json","data","status","message","alert","totalTaskCount","total_task_count","Math","max","ceil","task","id","formData","FormData","append","text","body","method","slice","updatedTask","find","el","queryString","pages","i","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../styles/taskContainer.css';\nimport TaskList from '../components/taskList';\nimport { getQueryParams, updateQueryStringParameter, generateSignature } from '../utils'\nimport { TOKEN } from '../constants'\n\nclass TaskContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [],\n      pagesCount: 1,\n      sortField: '',\n      sortDirection: '',\n      page: '',\n      isAdmin: false\n    }\n    this.updateTask = this.updateTask.bind(this);\n  }\n  componentDidMount() {\n    this.fetchData();\n  }\n  componentDidUpdate() {\n    this.fetchData();\n  }\n  fetchData() {\n    const queryParams = getQueryParams(this.props.location.search);\n    const sortField = queryParams.sort_field || 'id';\n    const sortDirection = queryParams.sort_direction || 'asc';\n    const page = queryParams.page || '1';\n    if(this.state.sortField === sortField && this.state.sortDirection === sortDirection && this.state.page === page) {\n      return;\n    }\n    this.setState({\n      sortField,\n      sortDirection,\n      page\n    });\n    fetch(`https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=aldiyar&sort_field=${sortField}&sort_direction=${sortDirection}&page=${page}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.status !== 'ok' || !data.message) {\n          alert('Error: ' + data.message);\n        }\n        const {tasks, total_task_count: totalTaskCount} = data.message;\n        const pagesCount = Math.max(Math.ceil(totalTaskCount / 3), 1);\n        this.setState({\n          tasks,\n          pagesCount\n        })\n      });\n\n  }\n  updateTask(task) {\n    if (!this.props.isAdmin || !task.id) {\n      return;\n    }\n    const formData = new FormData();\n\n    formData.append(\"text\", task.text);\n    formData.append(\"status\", task.status);\n    formData.append(\"token\", TOKEN);\n    formData.append(\"signature\", generateSignature({status: task.status, text: task.text}, TOKEN));\n    fetch(`https://uxcandy.com/~shapoval/test-task-backend/edit/${task.id}/?developer=alexander`, {\n          body: formData,\n          method: \"post\"\n      })\n      .then(res => res.json())\n      .then(data => {\n        if (data.status !== 'ok') {\n          alert('Something went wrong: ' + data.message);\n          return;\n        }\n        const tasks = this.state.tasks.slice(0);\n        const updatedTask = tasks.find((el) => el.id === task.id);\n        updatedTask.text = task.text;\n        updatedTask.status = task.status;\n        this.setState({\n          tasks\n        });\n      });\n\n  }\n  render() {\n    const queryString = this.props.location.search;\n    const pages = [];\n    for (let i = 1; i <= this.state.pagesCount; i++) {\n        pages.push(<Link to={updateQueryStringParameter(queryString, 'page', i)} className=\"pagination-bar__page\" key={i}>{i}</Link>);\n    };\n    return (\n\n      <div className=\"task-container\">\n        <div className=\"task-container__sorting-bar\">\n          <div className=\"sorting-bar__section\">Sort by:\n            <Link to={updateQueryStringParameter(queryString, 'sort_field', 'id')}>Id</Link>\n            <Link to={updateQueryStringParameter(queryString, 'sort_field', 'username')}>Username</Link>\n            <Link to={updateQueryStringParameter(queryString, 'sort_field', 'email')}>Email</Link>\n            <Link to={updateQueryStringParameter(queryString, 'sort_field', 'status')}>Status</Link>\n          </div>\n          \n          <div className=\"sorting-bar__section\">Sort direction:\n            <Link to={updateQueryStringParameter(queryString, 'sort_direction', 'asc')}>Ascending</Link>\n            <Link to={updateQueryStringParameter(queryString, 'sort_direction', 'desc')}>Descending</Link>\n          </div>\n        </div>\n        <TaskList tasks={this.state.tasks} isAdmin={this.props.isAdmin} updateTask={this.updateTask}></TaskList>\n        <div className=\"task-container__pagination-bar\">\n            {pages}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TaskContainer;\n"]},"metadata":{},"sourceType":"module"}