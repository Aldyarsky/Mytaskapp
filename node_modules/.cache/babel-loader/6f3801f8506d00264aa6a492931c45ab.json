{"ast":null,"code":"import md5 from 'md5';\nexport var dataURItoBlob = function dataURItoBlob(dataURI) {\n  var byteString;\n  if (dataURI.split(',')[0].indexOf('base64') >= 0) byteString = atob(dataURI.split(',')[1]);else byteString = unescape(dataURI.split(',')[1]);\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  var ia = new Uint8Array(byteString.length);\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  }\n\n  return new Blob([ia], {\n    type: mimeString\n  });\n};\nexport var getQueryParams = function getQueryParams(qs) {\n  qs = qs.split('+').join(' ');\n  var params = {},\n      re = /[?&]?([^=]+)=([^&]*)/g;\n  var tokens;\n\n  while (tokens = re.exec(qs)) {\n    params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n  }\n\n  return params;\n};\nexport var updateQueryStringParameter = function updateQueryStringParameter(uri, key, value) {\n  var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n  var separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\n\n  if (uri.match(re)) {\n    return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n  } else {\n    return uri + separator + key + \"=\" + value;\n  }\n};\nexport var login = function login(_login, password) {\n  return new Promise(function (resolve, reject) {\n    if (_login === 'admin' && password === '123') {\n      resolve();\n      return;\n    }\n\n    reject();\n  });\n};\nexport var encodeRfc3986 = function encodeRfc3986(string) {\n  return encodeURIComponent(string).replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  });\n};\nexport var generateSignature = function generateSignature(params, token) {\n  var keys = Object.keys(params);\n  keys.sort(function (a, b) {\n    return a.localeCompare(b);\n  });\n  var stringForEncode = keys.reduce(function (acc, val) {\n    return acc + \"\".concat(val, \"=\").concat(encodeRfc3986(params[val]), \"&\");\n  }, '');\n  stringForEncode += \"token=\".concat(token);\n  return md5(stringForEncode);\n};","map":{"version":3,"sources":["C:\\Users\\aldya\\Desktop\\task-list-master\\src\\utils.js"],"names":["md5","dataURItoBlob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","getQueryParams","qs","join","params","re","tokens","exec","decodeURIComponent","updateQueryStringParameter","uri","key","value","RegExp","separator","match","replace","login","password","Promise","resolve","reject","encodeRfc3986","string","encodeURIComponent","c","toString","generateSignature","token","keys","Object","sort","a","b","localeCompare","stringForEncode","reduce","acc","val"],"mappings":"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","sourcesContent":["import md5 from 'md5';\n\nexport const dataURItoBlob = (dataURI) => {\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0)\n        byteString = atob(dataURI.split(',')[1]);\n    else\n        byteString = unescape(dataURI.split(',')[1]);\n\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    let ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {type:mimeString});\n}\n\nexport const getQueryParams = (qs) => {\n    qs = qs.split('+').join(' ');\n\n    const params = {},\n        re = /[?&]?([^=]+)=([^&]*)/g;\n    let tokens;\n\n    while (tokens = re.exec(qs)) {\n        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n    }\n\n    return params;\n}\n\nexport const updateQueryStringParameter = (uri, key, value) => {\n    const re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", \"i\");\n    const separator = uri.indexOf('?') !== -1 ? \"&\" : \"?\";\n    if (uri.match(re)) {\n      return uri.replace(re, '$1' + key + \"=\" + value + '$2');\n    }\n    else {\n      return uri + separator + key + \"=\" + value;\n    }\n}\n\nexport const login = (login, password) => {\n    return new Promise((resolve, reject) => {\n        if (login === 'admin' && password === '123') {\n            resolve();\n            return;\n        }\n        reject();\n    })\n}\n\nexport const encodeRfc3986 = string => {\n    return encodeURIComponent(string).replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n    });\n}\n\nexport const generateSignature = (params, token) => {\n    const keys = Object.keys(params);\n    keys.sort((a, b) => a.localeCompare(b));\n    let stringForEncode = keys.reduce((acc, val) => {\n        return acc + `${val}=${encodeRfc3986(params[val])}&`;\n    }, '')\n    stringForEncode += `token=${token}`;\n    return md5(stringForEncode);\n}\n"]},"metadata":{},"sourceType":"module"}