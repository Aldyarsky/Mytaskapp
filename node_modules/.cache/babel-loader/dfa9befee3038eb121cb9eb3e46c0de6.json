{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\aldya\\\\Desktop\\\\task-list-master\\\\src\\\\components\\\\task.js\";\nimport React, { Component } from 'react';\nimport '../styles/task.css';\n\nvar Task =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Task, _Component);\n\n  function Task(props) {\n    var _this;\n\n    _classCallCheck(this, Task);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Task).call(this, props));\n    _this.state = {\n      taskText: _this.props.task.text,\n      taskStatus: _this.props.task.status,\n      editMode: false\n    };\n    _this.toggleEdit = _this.toggleEdit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.saveTask = _this.saveTask.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.finishTask = _this.finishTask.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Task, [{\n    key: \"toggleEdit\",\n    value: function toggleEdit() {\n      if (this.props.isAdmin) {\n        var editMode = !this.state.editMode;\n        this.setState({\n          editMode: editMode,\n          taskText: this.props.task.text,\n          taskStatus: this.props.task.status\n        });\n      }\n\n      ;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      this.setState({\n        taskText: event.target.value\n      });\n    }\n  }, {\n    key: \"saveTask\",\n    value: function saveTask(e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      this.setState({\n        editMode: false\n      });\n      var task = Object.assign({}, this.props.task);\n      task.text = this.state.taskText;\n      task.status = this.state.taskStatus;\n      this.props.updateTask(task);\n    }\n  }, {\n    key: \"finishTask\",\n    value: function finishTask(e) {\n      var _this2 = this;\n\n      this.setState({\n        taskStatus: 10\n      }, function () {\n        return _this2.saveTask();\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$task = this.props.task,\n          email = _this$props$task.email,\n          username = _this$props$task.username,\n          image = _this$props$task.image_path;\n      var _this$state = this.state,\n          taskText = _this$state.taskText,\n          taskStatus = _this$state.taskStatus;\n      var taskClass = \"task \".concat(taskStatus === 10 ? 'task--done' : '');\n      var altText = username + '\\'s image';\n      var content;\n\n      if (this.state.editMode) {\n        content = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"textarea\", {\n          value: taskText,\n          className: \"task__textarea\",\n          onChange: this.handleChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: this.saveTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"Save\"), React.createElement(\"img\", {\n          src: image,\n          alt: altText,\n          className: \"task__image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }));\n      } else {\n        content = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, this.props.isAdmin && taskStatus !== 10 ? React.createElement(\"button\", {\n          onClick: this.finishTask,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        }, \"Finish\") : '', React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: image,\n          alt: altText,\n          className: \"task__image\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), taskText));\n      }\n\n      return React.createElement(\"article\", {\n        className: taskClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, taskStatus === 10 ? 'âœ” ' : '', username, \" - \", email), this.props.isAdmin ? React.createElement(\"button\", {\n        onClick: this.toggleEdit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Edit\") : '', content);\n    }\n  }]);\n\n  return Task;\n}(Component);\n\nexport default Task;","map":{"version":3,"sources":["C:\\Users\\aldya\\Desktop\\task-list-master\\src\\components\\task.js"],"names":["React","Component","Task","props","state","taskText","task","text","taskStatus","status","editMode","toggleEdit","bind","handleChange","saveTask","finishTask","isAdmin","setState","event","target","value","e","preventDefault","Object","assign","updateTask","email","username","image","image_path","taskClass","altText","content"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/task.css';\n\nclass Task extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            taskText: this.props.task.text,\n            taskStatus: this.props.task.status,\n            editMode:  false\n        }\n\n        this.toggleEdit = this.toggleEdit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.saveTask = this.saveTask.bind(this);\n        this.finishTask = this.finishTask.bind(this);\n    }\n    toggleEdit() {\n        if(this.props.isAdmin) {\n            const editMode = !this.state.editMode;\n            this.setState({\n                editMode,\n                taskText: this.props.task.text,\n                taskStatus: this.props.task.status,\n            });\n        };\n    }\n    handleChange(event) {\n        this.setState({taskText: event.target.value});\n    }\n    saveTask(e) {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState({editMode: false});\n        const task = Object.assign({}, this.props.task);\n        task.text = this.state.taskText;\n        task.status = this.state.taskStatus;\n        this.props.updateTask(task);\n    }\n    finishTask(e) {\n        this.setState({\n            taskStatus: 10\n        }, () => this.saveTask());\n    }\n    render() {\n        const {email, username, image_path: image} = this.props.task;\n        const {taskText, taskStatus} = this.state;\n        const taskClass = `task ${taskStatus === 10 ? 'task--done' : ''}`;\n        const altText = username + '\\'s image';\n        let content;\n\n        if (this.state.editMode) {\n            content = (\n                <React.Fragment>\n                    <textarea value={taskText} className=\"task__textarea\" onChange={this.handleChange}></textarea>\n                    <button onClick={this.saveTask}>Save</button>\n                    <img src={image} alt={altText}  className=\"task__image\"></img>\n                </React.Fragment>\n            );\n        } else {\n            content = (\n                <React.Fragment>\n                    {this.props.isAdmin && taskStatus !== 10 ? <button onClick={this.finishTask}>Finish</button> : ''}\n                    <p><img src={image} alt={altText}  className=\"task__image\"></img>{taskText}</p>\n                </React.Fragment>\n            )\n        }\n        return (\n            <article className={taskClass}>\n                <h2>{taskStatus === 10 ? 'âœ” ' : ''}{username} - {email}</h2>\n                {this.props.isAdmin ? <button onClick={this.toggleEdit}>Edit</button> : ''}\n                {content}\n            </article>\n        );\n    }\n}\n\nexport default Task;\n"]},"metadata":{},"sourceType":"module"}